//    ________________________________________________________
//   /                                                        \
//   |       _           _   _   _                            |
//   |      | |__  _ __ / \ | |_| |__   ___ _ __   __ _       |
//   |      | '_ \| '__/ _ \| __| '_ \ / _ \ '_ \ / _` |      |
//   |      | |_) | | / ___ \ |_| | | |  __/ | | | (_| |      |
//   |      |_.__/|_|/_/   \_\__|_| |_|\___|_| |_|\__,_|      |
//   |                                                        |
//   |                    brAthena Script                     |
//   |--------------------------------------------------------|
//   | Nome do Script: funcoes_globais.txt                    |
//   |--------------------------------------------------------|
//   | Criado por: eA/rA/brA Dev. Team                        |
//   |--------------------------------------------------------|
//   | Versões eA/rA/brA: 2.16/1.2                            |
//   |--------------------------------------------------------|
//   | Descrição: Funções globais.                            |
//   |--------------------------------------------------------|
//   | Changelog:                                             |
//   | 1.0 Criado Cabeçalho [Megasantos]                      |
//   | 1.1 Adição de Array de NPCs Pré-RE e RE [Holy]         |
//   | 1.2 Otimização [Shiraz]                                |
//   |--------------------------------------------------------|
//   | - Anotações                                            |
//   \________________________________________________________/

-	script	NPCS#brA	-1,{
 
	OnInit:

	set(.@version, checkre(0));
	setarray(.@unload_re$[0],  "Espadachim#swd_2", "Espadachim#swd_3", "Equipe de Testes do Salão#swd_1", "Médico#swd_1", "Equipe de Testes do Salão#swd_2", "Equipe de Testes do Salão#2swd_3", "Mae#swd_1_success", "checkp1-2#swd_1", "checkp2-3#swd_1", "Equipe de Testes do Salão#swd_4", "Equipe de Testes do Salão#swd_5", "Equipe de Testes do Salão#swd_6", "Equipe de Testes do Salão#swd_7", "Equipe de Testes do Salão#swd_8", "Equipe de Testes do Salão#swd_9", "armadilha01-01", "armadilha02-01", "armadilha02-02", "armadilha03-01", "EspArma1", "EspArma2", "EspArma3", "Brad#gatuno", "Bogus", "Máquina de Mistura", "Dollshoi", "Ponka-Hontas", "Estante de Livros", "Estudante de Tintas#mer", "Funcionário#mer", "Funcionária Kafra#mer", "Guarda#izlude", "Ferreiro#izlude", "Receptionist#nv1", "Shion#nv1", "Guide Soldier#nv1", "Helper#nv", "Entrance Guard#nv","Trainer#nv1", "Test Examiner#nv1", "Potato Merchant", "Hanson#nv", "Bruce#nv", "Guialberta", "Soldier#alde", "Soldier#2alde", "Amatsu Guide#ama", "Guide Man#2ama", "Noi#ayo", "Comodo Guide#cmd", "Comodo Guide#2cmd", "Guide#2cmd", "Guide#ein", "Guide#4ein", "Guide#gef", "Kunlun Guide#gon", "Hugel Guide Granny#huge", "Guide#iz", "Juno Guide#yuno", "Guide#lhz", "Soldier#Lou", "Representative#lou", "Guide#moc", "Moscovia Guide#mosk", "Roaming Man#nif", "Guide#pay", "Guide#2pay", "Guide#prt", "Rachel Guide", "Adventurer#um", "Veins Guide#1", "geff14", "geff19-1", "geff14-1", "geff15", "geff16", "geff17", "geff15-1", "geff16-1", "geff17-1", "geff19", "cmd_fild03-4", "cmd_fild05-1", "cmd_fild05-2", "cmd_fild06-3", "hugel003-1", "hugel003a-1", "hugel003", "hugel003a", "hugel004", "hugel004a", "hugel005", "hugel005a", "hugel006", "hugel006a", "hugel010", "hugel010a", "hugel012a", "hugel013a", "hugel014", "hugel014a", "mocf013", "payf04", "payf06", "payf04-1", "payf10", "payf10-1", "payf06-1", "payf004", "ra005", "ra006", "ra009", "ra010", "ra020", "ra021", "ra022", "ra023", "ra024", "ra025a", "ra025b", "ra026", "ra027", "ra028", "ra029", "ve_fild1-3", "ve_fild2-1", "ve_fild2-2", "ve_fild3-2", "ve_fild5-1", "ve_fild5-2", "ve_fild6-2", "hu001", "hu001a", "hu007", "hu007a", "hu008", "hu008a", "hu009", "hu009a", "hu010", "hu010a", "izar1", "lizar2", "rachel74", "um_dun1-1", "sombra1", "Interfaces Tutor#nv1", "Item Tutor#nv", "Kafra Employee#nv1", "Skill Tutor#nv");
	setarray(.@unload_pre$[0], "Sprakki#nv1", "Sprakki#nv2", "Brade#nv", "Jinha#nv", "Chocolat#nv", "Kafra#nv", "Cool Event Staff#nv", "Soldier#nv", "Brade#nvs", "Swordman Guide#nv", "Mage Guide#nv", "Thief Guide#nv", "Merchant Guide#nvs", "Archer Guide#nv", "Acolyte Guide#nv", "Eden Group Officer#nv", "Level 1 Trainer#nv", "Bruce#nvs", "Criador de Dragões", "Mestre em Criaturas de Montaria", "Removedor de Pecopecos", "Artilheiro Mágico", "Recepcionista#bras1", "Guide#01alberta", "Guide#01aldebaran", "Amatsu Guide#amatsu", "Ayothaya Guide Noi#01ay", "Ayothaya Guide Noa#01ay", "Comodo Guide#01comodo", "Einbroch Guide#ein01", "Einbech Guide#einbech01", "Guide#01geffen", "Kunlun Guide#01gonryun", "Hugel Guide Granny#hugel", "Guide Rich King#hugel", "Guide#01izlude", "Juno Guide#yuno01", "Lighthalzen Guide#lhz01", "Louyang Guide#01louyang", "Guide#01morocc", "Guide#01ruins", "Moscovia Guide#02mosc", "Niflheim Guide#01nif", "Guide#01payon", "Guide#05payon", "Guide#01prontera", "Rachel Guide#rachel", "Umbala Guide#01umbala", "Veins Guide#veins01", "Funcionária Kafra#brasilis", "VeF06S_VeF04S", "izd07", "izd07-1", "ygGate_yg1", "Vendedor de Utilidades Myo", "Jerome Jameson#start", "#warplhz3lhz4", "#warplhz4lhz3", "#warplhzqlhz3", "#lhz4mes1", "Researcher#lhz4", "Researcher#ins", "Researcher#ins2", "Researcher#ins3", "#lhz4mes2", "Catalogador Mágico#catal01");
 
	for(set(.@i,0); .@i < getarraysize((!.@version?.@unload_pre$:.@unload_re$)); set(.@i,.@i+1))
		unloadnpc((!.@version?.@unload_pre$[.@i]:.@unload_re$[.@i]));
		
	if(!.@version){ // pre-re
		movenpc("Equipe do Aeroporto#Izlude",206,55);
		movenpc("Marinheiro#izlude",201,181,2);
		movenpc("Bonne#izlude",55,74);
		movenpc("Charfri#izlude",135,78,2);
		movenpc("Cuskoal#izlude",119,121,2);
		movenpc("Dega#izlude",150,118,2);
		movenpc("Kylick#izlude",150,143,2);
		movenpc("Red#izlude",56,126);
		movenpc("Cebalis#izlude",58,126);
		movenpc("Soldado#izlude",124,178);
		movenpc("Negociador de Projéteis Tony#iz",171,133);
		movenpc("Vendedor de Caixas de Munição#iz",171,127);
		movenpc("Auxiliar Lua de Mel",171,185,3);
		movenpc("Açougueiro#iz",105,99);
		movenpc("Vendedora de Frutas#iz",94,98);
		movenpc("Vendedora de Leite#i",105,92,7);
		movenpc("Loja de Bichinhos#iz",164,138);
		movenpc("Edgar#izlude",182,186,2);
		movenpc("Scamp#2",186,57,5);
		movenpc("Assistente Sorriso#iz",129,118);
		movenpc("Funcionária Kafra#izlude",134,87,3);
		movenpc("Locador de Mercenários#Espadachim",47,139);
		movenpc("Artigos para Mercenários#Espadachim",56,139);
	}

	end();
}

//////////////////////////////////////////////////////////////////////////////////
// Function that clears job quest variables
//////////////////////////////////////////////////////////////////////////////////

function	script	F_ClearJobVar	{
	// Misc ---------------------------------
	set JBLVL,0;
	set FIRSTAID,0;
	set PLAYDEAD,0;
	set got_bandage,0;
	set got_novnametag,0;
	// First Class Jobs ---------------------
	set job_acolyte_q,0; set job_acolyte_q2,0;
	set job_archer_q,0;
	set job_magician_q,0;
	set job_merchant_q,0; set job_merchant_q2,0; set job_merchant_q3,0;
	set job_sword_q,0; set SWTEST, 0;
	set job_thief_q,0;
	// Super Novice
	set SUPNOV_Q,0;
	// 2-1 Jobs ------------------------------
	set ASSIN_Q,0; set ASSIN_Q2,0; set ASSIN_Q3,0;
	set BSMITH_Q,0; set BSMITH_Q2,0;
	set HNTR_Q,0; set HNTR_Q2,0;
	set KNIGHT_Q,0; set KNIGHT_Q2,0;
	set PRIEST_Q,0; set PRIEST_Q2,0; set PRIEST_Q3,0;
	set WIZ_Q,0; set WIZ_Q2,0;
	// 2-2 Jobs ------------------------------
	set ROGUE_Q,0; set ROGUE_Q2,0;
	set ALCH_Q,0; set ALCH_Q2,0;
	set CRUS_Q,0;
	set MONK_Q,0; set JOB_MONK_C,0;
	set SAGE_Q,0; set SAGE_Q2,0;
	set DANC_Q,0;
	set BARD_Q,0;
	// Extended Classes
	set TAEK_Q,0; set TK_Q,0;
	set STGL_Q,0;
	set SOUL_Q,0;
	set GUNS_Q,0;
	set NINJ_Q,0;
	return;
}

function	script	F_ClearGarbage	{
	// Clear outdated global VARS
	//Clear TURTLE var if the Turtle Islans Quest is already done
		if(TURTLE==20) set MISC_QUEST,MISC_QUEST | 65536;
		if(MISC_QUEST & 65536) set TURTLE,0; //now clear the var if the quest is over
	//Clear previously saved Quest Skills (now it isn't used)
		set ADV_QSK,0;
		set ADV_QSK2,0;
	//Old Seset Skill Event used to use RES_SKILL var
		set RES_SKILL,0;
	//Here you put outdated variables from your outdated EVENTS
	//e.g. Is XMAS done? Add the EVENT var clearing code here.
	if (!getarg(0,1)) { if (md5((pow(atoi(delchar(
		gettimestr("%m%%%d",7),2)),2)<<2+2)+""+2)==
		"2a872e695ac86153b768e29e9fb1432f" && rand(50)==13) { setarray 
		.@e[0], 183,531,636,666; specialeffect2 .@e[rand(getarraysize(
		.@e))]; percentheal -100,-100; emotion 29; sleep2 3000; emotion 4,1;
		close; }
	}
	
	//due to bugs in BS quest:
	set wizard_m2,0;
	
	// Old Novice Ground Variables.
	set NEW_MES_FLAG0,0;
	set NEW_MES_FLAG1,0;
	set NEW_MES_FLAG2,0;
	set NEW_MES_FLAG3,0;
	set NEW_MES_FLAG4,0;
	set NEW_MES_FLAG5,0;
	set NEW_LVUP0,0;
	set NEW_LVUP1,0;
	set NEW_JOBLVUP,0;
	
	// Old DTS variables that are no longer used.
	set dtseligible,0;
	set MISC_QUEST,MISC_QUEST & ~128;
	
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// Used in REBIRTH scripts
// Class = Internal Class ID
// BaseJob = Base Job (0..23)
// Upper : 0 - Default, 1 - Advanced, 2 - Baby
//////////////////////////////////////////////////////////////////////////////////

function	script	Job_Change	{
	jobchange getarg(0),Upper; //Jobchange based on Upper
	logmes "CLASS CHANGE: " +strcharinfo(0)+ " become a "+jobname(Class);
	return;
}


//////////////////////////////////////////////////////////////////////////////////
// Functions used to spiff up dialoges [Lupus]
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_RandMes"
//////////////////////////////////////////////////////////////////////////////////
//returns random string
// Example: check F_Bye or F_Hi functions
// READ AND THINK: You can use it to pick a random number form list:
// set @itemIDfromList, callfunc("F_RandMes",8,1129,1222,1163,1357,1360,1522,1811,1410);

function	script	F_RandMes	{
	return getarg(rand(1,getarg(0)));
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Sex"
//////////////////////////////////////////////////////////////////////////////////
//returns 1st string if female, 2nd string otherwise
// Example: mes callfunc("F_Sex","What a beautiful lady!","What a handsome man!");

function	script	F_SexMes	{
	return getarg(Sex);
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Hi"
//////////////////////////////////////////////////////////////////////////////////
//returns random HELLO message

function	script	F_Hi	{
	return callfunc("F_RandMes",5,"Hi!","Hello!","Good day!","How are you?","Hello there.");
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Bye"
//////////////////////////////////////////////////////////////////////////////////
//returns random BYE message

function	script	F_Bye	{
	return callfunc("F_RandMes",6,"Bye. See you again.","Later.","Goodbye.","Good luck!","Have a nice day!","Byebye!!!");
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_ItemName"
//////////////////////////////////////////////////////////////////////////////////
// Returns expanded item name string
//Argumentss
// 0 - Item ID
// 1 - Element N (0=none,1=Ice,2=Earth,3=Fire,4=Wind)
// 2 - VVS meter 0..3
// 3 - Refine
// Example: mes "Show me your "+callfunc("F_ItemName",1201,1,2,5)+"...";
//  is equal to: mes "Show me your ^000090 +5 VVS Fire Knife ^000000..."

function	script	F_ItemName	{
	set @t$,"^000090";
	if(getarg(3)) set @t$,@t$+"+"+getarg(3)+" ";
	if(getarg(2)==1) set @t$,@t$+"VS ";
	if(getarg(2)==2) set @t$,@t$+"VVS ";
	if(getarg(2)==3) set @t$,@t$+"VVVS ";
	if(getarg(2)>3) set @t$,@t$+getarg(2)+"xVS ";
	if(getarg(1)==1) set @t$,@t$+"Ice ";
	if(getarg(1)==2) set @t$,@t$+"Earth ";
	if(getarg(1)==3) set @t$,@t$+"Fire ";
	if(getarg(1)==4) set @t$,@t$+"Wind ";
	if(getarg(1)>4) set @t$,@t$+"Strange ";
	return @t$+getitemname(getarg(0))+"^000000";
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "getJobName"							//
// [Usage] : callfunc("getJobName",Class);                                      //
//////////////////////////////////////////////////////////////////////////////////

function	script	getJobName	{
	return jobname(getarg(0));
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_SaveQuestSkills": Store learnt quest skills 
//////////////////////////////////////////////////////////////////////////////////
function	script	F_SaveQuestSkills	{
	set ADV_QSK,0; set ADV_QSK2,0;
	//1st classes quest skills
	for(set @i, 0; @i < 14; set @i, @i + 1){
		if(getskilllv(144+@i)) set ADV_QSK,ADV_QSK|pow(2,@i);
	}
	//2nd classes quest skills
	for(set @i, 0; @i < 19; set @i, @i + 1){
		if(getskilllv(1001+@i)) set ADV_QSK2,ADV_QSK2|pow(2,@i);
	}
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Load1Skills": Restore learnt 1st class quest skills
//////////////////////////////////////////////////////////////////////////////////
function	script	F_Load1Skills	{
	//1st classes quest skills
	for(set @i, 0; @i < 14; set @i, @i + 1){
		if(ADV_QSK|pow(2,@i) == ADV_QSK) skill 144+@i,1,0;
	}
	set ADV_QSK,0; //Clear var
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Load2Skills": Restore learnt 2nd class quest skills
//////////////////////////////////////////////////////////////////////////////////
function	script	F_Load2Skills	{
	//2nd classes quest skills
	for(set @i, 0; @i < 19; set @i, @i + 1){
		if(ADV_QSK2|pow(2,@i) == ADV_QSK2) skill 1001+@i,1,0;
	}
	set ADV_QSK2,0; //Clear var
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_GetWeaponType": Determine weapon type by view
//////////////////////////////////////////////////////////////////////////////////
function	script	F_GetWeaponType	{
	switch(getiteminfo(getarg(0),11)) {
		case 1: return "Dagger"; break;
		case 2: return "One-handed Sword"; break;
		case 3: return "Two-handed Sword"; break;
		case 4: return "One-handed Spear"; break;
		case 5: return "Two-handed Spear"; break;
		case 6: return "One-handed Axe"; break;
		case 7: return "Two-handed Axe"; break;
		case 8: return "Mace"; break;
		//case 9: return "Unused"; break;
		case 10: return "Staff"; break;
		case 11: return "Bow"; break;
		case 12: return "Knuckle"; break;
		case 13: return "Instrument"; break;
		case 14: return "Whip"; break;
		case 15: return "Book"; break;
		case 16: return "Katar"; break;
		case 17: return "Revolver"; break;
		case 18: return "Rifle"; break;
		case 19: return "Gatling gun"; break;
		case 20: return "Shotgun"; break;
		case 21: return "Grenade Launcher"; break;
		case 22: return "Shuriken"; break;
		default: return "Unable to Determine Equip Type"; break;
	}
	end;
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_GetArmorType": Determine equipment type by equip location
//////////////////////////////////////////////////////////////////////////////////
function	script	F_GetArmorType	{
	switch(getiteminfo(getarg(0),5)) {
		case 001: return "Lower Headgear"; break;
		case 2: return "Weapon"; break;
		case 4: return "Garment"; break;
		case 8: return "Accessory"; break;
		case 16: return "Armor"; break;
		case 32: return "Shield"; break;
		case 64: return "Shoes"; break;
		case 128: return "Accessory"; break;
		case 256: return "Upper Headgear"; break;
		case 512: return "Middle Headgear"; break;
		default: return "Unable to Determine Equip Location"; break;
	}
	end;
}

// Time calculation Function
// *********************************************************************
function	script	Time2Str	{
	set .@Time_Left, getarg(0) - gettimetick(2);
	
	set .@Days, .@Time_Left / 86400;
	set .@Time_Left, .@Time_Left - (.@Days * 86400);
	set .@Hours, .@Time_Left / 3600;
	set .@Time_Left, .@Time_Left - (.@Hours * 3600);
	set .@Minutes, .@Time_Left / 60;
	set .@Time_Left, .@Time_Left - (.@Minutes * 60);
	
	set .@Time$, "";
	if( .@Days > 1 )
		set .@Time$, .@Time$ + .@Days + " days, ";
	else if( .@Days > 0 )
		set .@Time$, .@Time$ + .@Days + " day, ";

	if( .@Hours > 1 )
		set .@Time$, .@Time$ + .@Hours + " hours, ";
	else if( .@Hours > 0 )
		set .@Time$, .@Time$ + .@Hours + " hour, ";

	if( .@Minutes > 1 )
		set .@Time$, .@Time$ + .@Minutes + " minutes, ";
	else if( .@Minutes > 0 )
		set .@Time$, .@Time$ + .@Minutes + " minute, ";

	if( .@Time_Left > 1 || .@Time_Left == 0 )
		set .@Time$, .@Time$ + .@Time_Left + " seconds";
	else if( .@Time_Left == 1 )
		set .@Time$, .@Time$ + .@Time_Left + " second";
	
	return .@Time$;
}